title Password Update

participant "manager" as m
participant "PasswordUpdateSqlService" as s
participant "UpdateSqlDAO" as d


m->d: var update =  new UpdateSqlDAO(String connection)
d-->m: return instance

note over s: PasswordUpdateSqlService will have a constructor that makes a list ouAccounts. Will add in ability to update multiple passwords if needed
m->s: var passUpdate = new PasswordUpdateSqlService(IUpdateDAO update, Account acc)
s-->m: return instance
m->s:IResult passUpdate.Update()
s->s: String message = \""
s->s: bool isSuccess = true
s->s: var commands = new List<SqlCommand>()
s->s: var tableName = ConfigurationManager.AppSettings["passTableName"]
alt foreach(Account acc in _accountList) 
s->s: var cmd = new SqlCommand("UPDATE @table SET Password = @Pass WHERE UserEmail = @email)
s->s: cmd.Parameters.AddWithValue("@email", acc.userEmail)
s->s: cmd.Parameters.AddWithValue("@table", tableName)
s->s: cmd.Parameters.AddWithValue("@Pass", acc.Password)
s->s: commands.add(cmd)

end


s->d:int updateDao.Update(List<SqlCommand> commands)
alt using (SqlConnection connection = new SqlConnection(connection))
d->d: connection.Open()

d->d: SqlTransaction trans = connection.BeginTransaction()

d->d: int rowsChanged = 0
alt try
alt foreach(Sqlcommand cmd in commands)
d->d:cmd.Connection = connection
d->d:cmd.Transaction = trans
d->d:rowsChanged+=cmd.ExecuteNonQuery()
end 
d->d:trans.Commit()
else catch(Exception e)

d->d: trans.Rollback()

end 
end 
d-->s: return rowsChanged
alt if(rowsChanged==commands.size())
s->s:message = ConfigurationMangaer.AppSettings["SuccessMessage"]
else else
s->s: message = ConfigurationManager.AppSettings["FailureMessage"]
s->s: isSuccess = false
end 


s-->m: return new CheckResult(message, isSuccess);
